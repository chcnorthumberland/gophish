/*!
 * ------------------------------------------- START OF THIRD PARTY NOTICE -----------------------------------------
 * 
 * This file is based on or incorporates material from the projects listed below (Third Party IP). The original copyright notice and the license under which Microsoft received such Third Party IP, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft licenses the Third Party IP to you under the licensing terms for the Microsoft product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.
 * 
 *   json2.js (2016-05-01)
 *   https://github.com/douglascrockford/JSON-js
 *   License: Public Domain
 * 
 * Provided for Informational Purposes Only
 * 
 * ----------------------------------------------- END OF THIRD PARTY NOTICE ------------------------------------------
 */
(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{453:function(e,n,i){var t=i(2),o=i(0),s=i(1),a=i(4),r=i(3),d=i(28),c=i(31),l=i(11).getInstance(window.ServerData),u=i(7),p=i(6),w=i(14),v=i(5),x=i(9),h=i(16),f=i(19);var _=window,g=r.String,b=o.PaginatedState,k=o.LoginMode,T=o.CredentialType,P=o.EstsError,m=s.Helper;function C(e){var n=this,o=e.serverData,s=e.serverError,r=e.isInitialView,d=e.username,_=e.displayName||"",C=e.hipRequiredForUsername,S=e.passwordBrowserPrefill,R=e.availableCreds||[],D=e.evictedCreds||[],y=e.defaultKmsiValue,L=e.userTenantBranding,B=e.sessions,I=e.callMetadata,V=e.flowToken,E=e.useEvictedCredentials,F=e.showCredViewBrandingDesc,W=o.str,U=o.iLoginMode,A=o.urlHIPScript,M=o.sRemoteConnectAppName,H=o.fAllowCancel,O=o.urlSwitch,N=o.urlSkipZtd,K=o.fLockUsername,q=o.fShowSwitchUser,Z=o.fPOST_ForceSignin,G=o.sZtdFriendlyName,J=o.sZtdTenantName,j=o.sZtdUpnHint,z=o.fShowButtons,$=o.sErrorCode,X=o.fShowHipOnNewView,Y=(o.fLogSkipToOfflineAccountAction,o.fHideOfflineAccountWithNoSkipString,o.sUnauthSessionID),Q=o.iRequestLCID,ee=o.sSiteId,ne=o.sClientId,ie=o.sForwardedClientId,te=o.sNoPaBubbleVersion,oe=!1,se=null,ae=!1,re=!1,de={},ce=t.observable(!1);function le(){n.onSubmitReady()}function ue(e){n.isBackButtonVisible(e),n.onSetBackButtonState(z&&e)}function pe(e){return e.getResponseJson&&(e=e.getResponseJson()),{success:!0,userCode:e.UserCode,deviceCode:e.SessionLookupKey}}function we(){return n.setDefaultFocus(),{success:!1}}n.onSwitchView=a.create(),n.onSubmitReady=a.create(),n.onResetPassword=a.create(l.getDefaultEventTracingOptions(p.ClientTracingEventIds.ComponentEvent_LoginPaginatedPasswordView_onResetPassword,!0)),n.onRedirect=a.create(),n.onSetBackButtonState=a.create(),n.onSetPendingRequest=a.create(),n.onUpdateFlowToken=a.create(),n.passwordTextbox=new c(t.pureComputed((function(){var e;if(!ce())return e=s||null,s=null,e;return n.passwordTextbox.value()?null:W.CT_PWD_STR_Error_MissingPassword})),S),n.passwordTextbox.value.extend({logValue:l.getPasswordTextBoxPropertyLogOption(n,{eventId:p.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_Password})}),n.passwordTextbox.error.extend({logValue:l.getPropertyLogOption(n,{eventId:p.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_ClientError})}),n.hipInterface=t.observable(),n.isKmsiChecked=t.observable(y).extend({logValue:l.getPropertyLogOption(n,{eventId:p.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_KMSI})}),n.isRequestPending=t.observable(!1),n.unsafe_username=t.observable(),n.showTileLogo=t.observable(!1),n.isBackButtonVisible=t.observable(!1),n.secondaryButtonText=t.observable(),n.useEvictedCredentials=t.observable(E),n.showPassword=t.observable(!1),n.shouldHipInit=t.observable(!1),n.tenantBranding=null,n.unsafe_displayName=null,n.username=d,n.unsafe_passwordAriaLabel=null,n.hasRemoteNgc=!1,n.availableCreds=R,n.evictedCreds=D,n.allowPhoneDisambiguation=!1,n.unsafe_pageDescription=null,n.unsafe_pageTitle=null,n.unsafe_skipZTDLinkText=null,n.isInitialView=r,n.showHipOnPasswordView=!1,n.showChangeUserLink=!1,n.callMetadata=I,n.flowToken=V,n.showCredViewBrandingDesc=F,n.hideForgotMyPassword=!1,n.unsafe_forgotPasswordText=W.STR_SSSU_ForgotPassword||W.CT_PWD_STR_ForgotPwdLink_Text,n.hidePasswordReset=!1,n.accessRecoveryLink=null,l.attachViewLoadClientTracingOptions(n,{eventId:p.ClientTracingEventIds.Event_LoginPaginatedPasswordView_onLoad}),n.saveSharedData=function(e){var i=de.result;e.remoteNgcParams.requestSent=!1,e.useEvictedCredentials=ae||n.useEvictedCredentials(),e.password=n.passwordTextbox.value(),e.showCredViewBrandingDesc=!1,e.remoteLoginUserCode=i?i.userCode:null,e.remoteLoginDeviceCode=i?i.deviceCode:null,se&&(e.otcCredential=se)},n.getState=function(){return{isKmsiChecked:n.isKmsiChecked(),useEvictedCredentials:n.useEvictedCredentials()}},n.restoreState=function(e){e&&(n.isKmsiChecked(e.isKmsiChecked),n.useEvictedCredentials(e.useEvictedCredentials))},n.setDefaultFocus=function(){n.passwordTextbox.focused(!0)},n.primaryButton_onClick=function(){var e=n.hipInterface();if(!oe&&!n.isRequestPending())if(ce(!0),e&&e.enableValidation(),null===n.passwordTextbox.error())if(e){if(null!==e.getError())return void e.focus();oe=!0,e.verify((function(){oe=!1,le()}))}else re&&X?n.onSwitchView(b.Hip):le();else n.setDefaultFocus()},n.secondaryButton_onClick=function(){n.onSwitchView(b.Previous)},n.phoneDisambiguation_onClick=function(){n.onSwitchView(b.PhoneDisambiguation)},n.resetPassword_onClick=function(){n.onResetPassword(_)},n.selectAccount_onClick=function(){K&&O?n.onRedirect({url:O,eventOptions:{eventId:u.EventIds.Redriect_SwitchUser}}):n.onSwitchView(B.length?b.Tiles:b.Username)},n.hip_onHipLoad=function(){n.isRequestPending(!1),null!==n.passwordTextbox.error()&&n.setDefaultFocus()},n.skip_onClick=function(){null},n.switchToRemoteNGC_onClick=function(){n.onSwitchView(b.RemoteNGC)},n.skipZtd_onClick=function(){n.onRedirect({url:N,eventOptions:{eventId:u.EventIds.Redirect_SkipZeroTouch}})},n.privacy_onClick=function(){n.onSwitchView(b.ViewAgreement)},n.tileLogo_onLoad=function(){n.showTileLogo(!0)},n.desktopSso_onSuccess=function(){n.onSubmitReady()},n.switchToEvictedCredPicker_onClick=function(){ae=!0,n.onSwitchView(b.CredentialPicker)},n.credSwitchLink_onSwitchView=function(e,i,t){t&&(se=t),n.onSwitchView(e,i)},n.credSwitchLink_onSetPendingRequest=function(e){n.onSetPendingRequest(e),n.isRequestPending(e)},n.credSwitchLink_onUpdateFlowToken=function(e){e&&(V=e,n.onUpdateFlowToken(e))},n.remoteLogin_onClick=function(){var e;x.throwUnhandledExceptionOnRejection((e=h.Purpose.XboxRemoteConnect,function(e){return new v((function(n,i){new f({purpose:e,flowToken:V,unauthSessionId:Y,lcid:Q,siteId:ee,clientId:ne,forwardedClientId:ie,noPaBubbleVersion:te,successCallback:n,failureCallback:i}).sendRequest()}))}(e).then(pe,we)).then((function(e){e.success&&(de.result=e,n.onSwitchView(b.RemoteLoginPolling))})))},function(){var e=m.htmlUnescape(_);if(n.unsafe_username(m.htmlUnescape(d)),n.unsafe_displayName=t.observable(e).extend({preventExternalWrite:null}),n.allowPhoneDisambiguation=!K&&!g.isEmailAddress(_)&&!g.isSkypeName(_)&&g.isPhoneNumber(_),n.hasRemoteNgc=!!t.utils.arrayFirst(R,(function(e){return e.credType===T.RemoteNGC})),re=!!A&&d===C,n.showHipOnPasswordView=re&&!X,n.showChangeUserLink=q&&(K&&O||r),n.tenantBranding=L,M&&r?n.unsafe_pageDescription=g.format(W.CT_PWD_STR_RemoteConnect_PasswordPage_Desc,M,e):U===k.ForceSignin||U===k.ForceSigninMobile||U===k.ForceSigninHost||Z?n.unsafe_pageDescription=function(e,n){switch(e){case P.SsoArtifactExpiredDueToConditionalAccess:return W.WF_STR_ASLP_Info;case P.SsoArtifactExpiredDueToConditionalAccessReAuth:return W.WF_STR_ReAuth_Info;default:return g.format(W.WF_STR_ForceSI_Info,n)}}($,e):W.CT_PWD_STR_EnterPassword_Desc&&(n.unsafe_pageDescription=g.format(W.CT_PWD_STR_EnterPassword_Desc,e)),j&&J){var o=m.htmlUnescape(J);n.unsafe_pageTitle=G?g.format(W.CT_Win10_PwdWithOrgDomain_AndFriendlyName,m.htmlUnescape(G),o):g.format(W.CT_Win10_STR_Pwd_Title_WithOrgDomain,o),n.unsafe_skipZTDLinkText=g.format(W.CT_Win10_STR_Pwd_StartOver_WithOrgDomain,o)}else n.unsafe_pageTitle=W.CT_PWD_STR_EnterYourPassword_Title,n.unsafe_skipZTDLinkText=W.CT_Win10_STR_StartOver;if(n.unsafe_passwordAriaLabel=g.format(W.CT_PWD_STR_PwdTB_AriaLabel,e),n.showHipOnPasswordView&&n.isRequestPending(!0),n.unsafe_displayName.subscribe((function(){setTimeout((function(){n.passwordTextbox.value(null)}),0)})),r?H&&ue(!0):ue(!0),A&&n.showHipOnPasswordView&&i.e(1).then(function(){i(685),n.shouldHipInit(!0)}.bind(null,i))["catch"](i.oe),L){var s=w.getLayoutTemplateConfig(L);L.ForgotPasswordText&&(n.unsafe_forgotPasswordText=m.htmlUnescape(L.ForgotPasswordText)),n.accessRecoveryLink=L.AccessRecoveryLink,n.hideForgotMyPassword=s.hideForgotMyPassword||s.hideAccountResetCredentials,n.hidePasswordReset=s.hideResetItNow||s.hideAccountResetCredentials}}()}d.applyExtenders(t),t.components.register("login-paginated-password-view",{viewModel:C,template:i(557),synchronous:!_.ServerData.iMaxStackForKnockoutAsyncComponents||s.Helper.isStackSizeGreaterThan(_.ServerData.iMaxStackForKnockoutAsyncComponents),enableExtensions:!0}),e.exports=C},557:function(e,n,i){e.exports="\x3c!-- "+(i(32),i(13),i(29),' --\x3e\n\n\x3c!--  --\x3e\n\n<div aria-hidden="true">\n    <input type="hidden" name="i13" data-bind="value: isKmsiChecked() ? 1 : 0" />\n    <input type="hidden" name="login" data-bind="value: unsafe_username" />\n    \x3c!-- The loginfmt input type is different as some password managers require it to be of type text.\n        Since screen readers might not hide this input, a parent div with aria-hidden true has been added. --\x3e\n    <input type="text" name="loginfmt" data-bind="moveOffScreen, value: unsafe_displayName" />\n    <input type="hidden" name="type"\n        data-bind="value: svr.fUseWizardBehavior ? ')+i(0).PostType.PasswordInline+" : "+i(0).PostType.Password+'" />\n    <input type="hidden" name="LoginOptions"\n        data-bind="value: isKmsiChecked() ? '+i(6).LoginOption.RememberPWD+" : "+i(6).LoginOption.NothingChecked+'" />\n    <input type="hidden" name="lrt" data-bind="value: callMetadata.IsLongRunningTransaction" />\n    <input type="hidden" name="lrtPartition" data-bind="value: callMetadata.LongRunningTransactionPartition" />\n    <input type="hidden" name="hisRegion" data-bind="value: callMetadata.HisRegion" />\n    <input type="hidden" name="hisScaleUnit" data-bind="value: callMetadata.HisScaleUnit" />\n</div>\n\n<div id="loginHeader" class="row" data-bind="externalCss: { \'title\': true }">\n    <div role="heading" aria-level="1" data-bind="text: str[\'CT_PWD_STR_EnterPassword_Title\']"></div>\n</div>\n\n\x3c!-- ko if: showCredViewBrandingDesc --\x3e\n<div class="row text-body">\n    <div id="credViewBrandingDesc" class="wrap-content" data-bind="text: str[\'WF_STR_Default_Desc\']"></div>\n</div>\n\x3c!-- /ko --\x3e\n\n\x3c!-- ko if: unsafe_pageDescription --\x3e\n<div class="row text-body">\n    <div id="passwordDesc" class="wrap-content" data-bind="text: unsafe_pageDescription"></div>\n</div>\n\x3c!-- /ko --\x3e\n\n<div class="row">\n    <div class="form-group col-md-24">\n        <div role="alert" aria-live="assertive">\n            \x3c!-- ko if: passwordTextbox.error --\x3e\n            <div id="passwordError" data-bind="\n                externalCss: { \'error\': true },\n                htmlWithBindings: passwordTextbox.error,\n                childBindings: {\n                    \'idA_IL_ForgotPassword0\': {\n                        href: accessRecoveryLink || svr.urlResetPassword,\n                        attr: { target: accessRecoveryLink && \'_blank\' },\n                        click: accessRecoveryLink ? null : resetPassword_onClick } }"></div>\n            \x3c!-- /ko --\x3e\n        </div>\n\n        <div class="placeholderContainer" data-bind="component: { name: \'placeholder-textbox-field\',\n            publicMethods: passwordTextbox.placeholderTextboxMethods,\n            params: {\n                serverData: svr,\n                hintText: str[\'CT_PWD_STR_PwdTB_Label\'] },\n            event: {\n                updateFocus: passwordTextbox.textbox_onUpdateFocus } }">\n\n            <input name="passwd" type="password" id="i0118" autocomplete="off" class="form-control" aria-required="true" data-bind="\n                textInput: passwordTextbox.value,\n                ariaDescribedBy: [\n                    \'loginHeader passwordError\',\n                    showCredViewBrandingDesc ? \'credViewBrandingDesc\' : \'\',\n                    unsafe_pageDescription ? \'passwordDesc\' : \'\'].join(\' \'),\n                hasFocusEx: passwordTextbox.focused() && !showPassword(),\n                placeholder: $placeholderText,\n                ariaLabel: unsafe_passwordAriaLabel,\n                moveOffScreen: showPassword,\n                externalCss: {\n                    \'input\': true,\n                    \'text-box\': true,\n                    \'has-error\': passwordTextbox.error }" />\n\n            \x3c!-- ko if: svr.fUsePasswordPeek && showPassword() --\x3e\n            <input type="text" autocomplete="off" class="form-control" aria-required="true" data-bind="\n                textInput: passwordTextbox.value,\n                ariaDescribedBy: [\n                    \'loginHeader\',\n                    showCredViewBrandingDesc ? \'credViewBrandingDesc\' : \'\',\n                    unsafe_pageDescription ? \'passwordDesc\' : \'\'].join(\' \'),\n                hasFocusEx: true,\n                placeholder: $placeholderText,\n                ariaLabel: unsafe_passwordAriaLabel,\n                externalCss: {\n                    \'input\': true,\n                    \'text-box\': true,\n                    \'has-error\': passwordTextbox.error }" />\n            \x3c!-- /ko --\x3e\n        </div>\n\n        \x3c!-- ko if: svr.fUsePasswordPeek --\x3e\n        <div class="checkbox no-margin-bottom">\n            <label>\n                <input id="ShowHidePasswordCheckbox" type="checkbox" data-bind="checked: showPassword, ariaLabel: str[\'CT_PWD_STR_ShowPasswordAriaLabel\']" />\n                <span id="ShowHidePasswordLabel" data-bind="text: str[\'CT_PWD_STR_ShowPasswordLabel\']"></span>\n            </label>\n        </div>\n        \x3c!-- /ko --\x3e\n    </div>\n</div>\n\n\x3c!-- ko if: shouldHipInit --\x3e\n<div data-bind="component: { name: \'hip-field\',\n    publicMethods: hipInterface,\n    params: {\n        str: str,\n        onDemandVerify: true,\n        hasServerError: svr.fHIPError,\n        useFake: svr.fUseFakeHIP },\n    event: {\n        hipLoad: hip_onHipLoad } }">\n</div>\n\x3c!-- /ko --\x3e\n\n<div data-bind="css: { \'position-buttons\': !tenantBranding.BoilerPlateText }, externalCss: { \'password-reset-links-container\': true }">\n    <div>\n        \x3c!-- ko if: svr.fShowPersistentCookiesWarning --\x3e\n        <div class="row text-body">\n            <div id="swv-warning" class="wrap-content" data-bind="text: str[\'CT_PWD_STR_PersistentCookies_Warning\']"></div>\n        </div>\n        \x3c!-- /ko --\x3e\n        \x3c!-- ko if: svr.fKMSIEnabled !== false && !svr.fShowPersistentCookiesWarning && !tenantBranding.KeepMeSignedInDisabled --\x3e\n        <div id="idTd_PWD_KMSI_Cb" class="form-group checkbox text-block-body no-margin-top" data-bind="visible: !svr.fLockUsername && !showHipOnPasswordView">\n            <label id="idLbl_PWD_KMSI_Cb">\n                <input name="KMSI" id="idChkBx_PWD_KMSI0Pwd" type="checkbox" data-bind="checked: isKmsiChecked, ariaLabel: str[\'CT_PWD_STR_KeepMeSignedInCB_Text\']" />\n                <span data-bind="text: str[\'CT_PWD_STR_KeepMeSignedInCB_Text\']"></span>\n            </label>\n        </div>\n        \x3c!-- /ko --\x3e\n\n        <div class="row">\n            <div class="col-md-24">\n                <div class="text-13">\n                    \x3c!-- ko if: svr.urlSkipZtd && svr.sZtdUpnHint --\x3e\n                    <div class="form-group">\n                        <a id="idSkipZtdLink" name="switchToOfflineAccount" href="#" data-bind="\n                            text: unsafe_skipZTDLinkText,\n                            click: skipZtd_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko ifnot: hideForgotMyPassword --\x3e\n                    <div class="form-group">\n                        <a id="idA_PWD_ForgotPassword" role="link" href="#" data-bind="\n                            text: unsafe_forgotPasswordText,\n                            href: accessRecoveryLink || svr.urlResetPassword,\n                            attr: { target: accessRecoveryLink && \'_blank\' },\n                            click: accessRecoveryLink ? null : resetPassword_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko if: allowPhoneDisambiguation --\x3e\n                    <div class="form-group">\n                        <a id="switchToPhoneDisambiguation" href="#" data-bind="text: str[\'WF_STR_ThisIsntMyNumber_Text\'], click: phoneDisambiguation_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko ifnot: useEvictedCredentials --\x3e\n                        \x3c!-- ko component: { name: "cred-switch-link-control",\n                            params: {\n                                serverData: svr,\n                                username: username,\n                                availableCreds: availableCreds,\n                                flowToken: flowToken,\n                                currentCred: { credType: '+i(0).CredentialType.Password+' } },\n                            event: {\n                                switchView: credSwitchLink_onSwitchView,\n                                redirect: onRedirect,\n                                setPendingRequest: credSwitchLink_onSetPendingRequest,\n                                updateFlowToken: credSwitchLink_onUpdateFlowToken } } --\x3e\n                        \x3c!-- /ko --\x3e\n\n                        \x3c!-- ko if: evictedCreds.length > 0 --\x3e\n                        <div class="form-group">\n                            <a id="evictedAccount" href="#" data-bind="text: str[\'CT_PWD_STR_SwitchToCredPicker_Link_EvictedAcct\'], click: switchToEvictedCredPicker_onClick"></a>\n                        </div>\n                        \x3c!-- /ko --\x3e\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko if: showChangeUserLink --\x3e\n                    <div class="form-group">\n                        <a id="i1668" href="#" data-bind="text: str[\'CT_FED_STR_ChangeUserLink_Text\'], click: selectAccount_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="win-button-pin-bottom" data-bind="css : { \'boilerplate-button-bottom\': tenantBranding.BoilerPlateText }">\n        <div class="row" data-bind="css: { \'move-buttons\': tenantBranding.BoilerPlateText }">\n            <div data-bind="component: { name: \'footer-buttons-field\',\n                params: {\n                    serverData: svr,\n                    primaryButtonText: str[\'CT_PWD_STR_SignIn_Button\'],\n                    isPrimaryButtonEnabled: !isRequestPending(),\n                    isPrimaryButtonVisible: svr.fShowButtons,\n                    isSecondaryButtonEnabled: true,\n                    isSecondaryButtonVisible: false },\n                event: {\n                    primaryButtonClick: primaryButton_onClick } }">\n            </div>\n        </div>\n    </div>\n</div>\n\n\x3c!-- ko if: tenantBranding.BoilerPlateText --\x3e\n<div id="idBoilerPlateText" class="wrap-content" data-bind="\n    htmlWithMods: tenantBranding.BoilerPlateText,\n    htmlMods: { filterLinks: svr.fIsHosted },\n    css: { \'transparent-lightbox\': tenantBranding.UseTransparentLightBox },\n    externalCss: { \'boilerplate-text\': true }"></div>\n\x3c!-- /ko --\x3e\n'}}]),window.__convergedlogin_ppassword_51269b1fec08d00a3770=!0;
//# sourceMappingURL=../51269b1fec08d00a3770.map